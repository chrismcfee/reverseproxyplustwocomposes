#!/bin/bash
set -e

HERE=$(dirname $(readlink -f "$0"))
INTEGRATION_PATH=$(dirname "$HERE")
export INTEGRATION_PATH

COMPOSE_CMD="docker-compose -p backend-tests \
             -f $INTEGRATION_PATH/docker-compose.yml \
             -f $INTEGRATION_PATH/docker-compose.demo.yml \
             -f $INTEGRATION_PATH/backend-tests/docker/docker-compose.backend-tests.yml"

# by default just add minio, with COMPOSE_CMD_BASE this creates the standard onprem ST setup
COMPOSE_FILES_DEFAULT=( "$INTEGRATION_PATH/docker-compose.storage.minio.yml" )
COMPOSE_FILES=()

usage() {
    echo "runner script for backend-specific integration tests"
    echo ""
    echo "./backend-tests"
    echo -e "\t-h --help"
    echo -e "\t-c --skip-cleanup \tleave containers running after tests"
    echo -e "\t-f=<FILE>         \tspecify custom compose file(s); default files will not be used,"
    echo -e "\t                  \tmake sure to specify all files you need"
    echo -e "\t other args will be passed to the testing container's py.test command"
    echo ""
    echo -e "examples:"
    echo -e "run all tests, default ST setup:"
    echo -e "\t./run"
    echo -e "run tests matching expression 'multitenant'"
    echo -e "\t./run -k multitenant"
}

parse_args(){
    whitespace="[[:space:]]"

    # FIXME args must be passed in the form -f=<path>; spaces don't workalthough they're standard...
    while [ $# -gt 0 ]; do
        PARAM=`echo $1 | awk -F= '{print $1}'`
        VALUE=`echo $1 | awk -F= '{print $2}'`
        case $PARAM in
            -h | --help)
            usage
            exit
            ;;
            -c | --skip-cleanup)
            SKIP_CLEANUP=1
            ;;
            -f)
            COMPOSE_FILES+=( $VALUE )
            ;;
            *)
        esac
        shift 1
    done

    make_compose_cmd
}

make_compose_cmd () {
    if [ ${#COMPOSE_FILES[@]} -eq 0 ]
    then
        COMPOSE_FILES=$COMPOSE_FILES_DEFAULT
    fi

    for var in "${COMPOSE_FILES[@]}"
    do
        COMPOSE_CMD+=" -f ${var}"
    done
}

build_backend_tests_runner() {
    docker build -t mender-backend-tests-runner -f $INTEGRATION_PATH/backend-tests/docker/Dockerfile $INTEGRATION_PATH/backend-tests
}

run_tests() {
    $COMPOSE_CMD up -d

    declare retries=5
    while [[ $retries -gt 0 && -z $cid ]]; do
        cid=$(get_container_id mender-backend-tests-runner)
        sleep 1
        retries=$((retries-1))
    done

    if [[ -z $cid ]]; then
        echo "failed to get container id"
        return 1
    fi

    docker attach $cid || failed=1

    get_container_exit_code $cid || true
    [ $? == 0 ] || failed=1
}

get_container_id() {
    echo "$(docker ps --filter label=com.docker.compose.service=$1 -q)"
}

get_container_exit_code() {
    docker inspect --format '{{.State.ExitCode}}' $1
}

cleanup(){
    [ -z $SKIP_CLEANUP ] && $COMPOSE_CMD down && $COMPOSE_CMD rm || true
}

parse_args "$@"
build_backend_tests_runner
run_tests

if [ -n "$failed" ]; then
    tmppath=$(mktemp /tmp/acceptance.XXXXXX)
    echo "-- tests failed, dumping logs to $tmppath"
    $COMPOSE_CMD logs > $tmppath
fi

cleanup

exit $failed
